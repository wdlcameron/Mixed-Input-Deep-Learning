
#################################################
### THIS FILE WAS AUTOGENERATED! DO NOT EDIT! ###
#################################################
# file to edit: dev_nb/Part 5 - Pytorch Hooks.ipynb

import numpy as np
import torch
import torch.nn as nn
import torch.nn.functional as F
import pandas as pd
from functools import partial
from pathlib import Path
import torchvision

import math
import matplotlib.pyplot as plt
import re


from scripts.dataloader import Dataset, Transforms, Resize, ToTorch, Sampler, collate, DataLoader
from scripts.custom_models import Lambda, flatten, MixedInputModel, TabularModel, CNNModel, CustomResnet
from scripts.optimizer_and_loss import Optimizer, MSE_Loss, get_example_dataloaders, get_example_model
from scripts.callbacks import (Datablock, Callback, Learner, ParamSchedulerCallback, AvgStatsCallback, \
                               EarlyStoppingCallback, MoveBatchGPUCallback, BatchNumberCalculator, RecorderCallback,
                              sched_combiner, annealer, sched_lin, sched_cos, sched_none, sched_exp)

class Hook():
    def __init__(self, module, hook_function):
        self.hook = module.register_forward_hook(partial(hook_function, self))
    def remove(self):
        self.hook.remove()
    def __del__(self):
        self.remove()

class Hooks():
    def __init__(self, layers, hook_func):
        self.layers = layers
        self.hook_func = hook_func
        self.hooks = []

    def __enter__(self):
        self.hooks = [Hook(layer, self.hook_func) for layer in self.layers]
        return self

    def __exit__(self, exception_type, exception_value, traceback):
        if exception_type: print(exception_type, exception_value, traceback)
        self.remove()

    def __del__(self):   self.remove()

    def remove(self):
        for h in self.hooks: h.remove()

    def __len__(self): return len(self.hooks)

    def __getitem__(self, k): return self.hooks[k]


def get_all_children(model, layers = [], base_only = True):
    children = list(model.children())

    #base case: no more children
    if len(children) == 0: layers.append(model)

    #recursive case
    else:
        for child in children:
            get_all_children(child, layers)
        if not base_only: layers.append(model)
    return layers


def append_stats(hook, mod, inp, outp):
    if not hasattr(hook,'stats'): hook.stats = ([],[],[])
    means,stds,hists = hook.stats
    means.append(outp.data.mean().cpu())
    stds .append(outp.data.std().cpu())
    hists.append(outp.data.cpu().histc(40,0,10))

