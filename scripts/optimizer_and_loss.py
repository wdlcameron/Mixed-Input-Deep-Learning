
#################################################
### THIS FILE WAS AUTOGENERATED! DO NOT EDIT! ###
#################################################
# file to edit: dev_nb/Part 3 - The Train Cycle.ipynb

import numpy as np
import torch
import torch.nn as nn
import torch.nn.functional as F
import pandas as pd
from functools import partial
from pathlib import Path
import torchvision

from scripts.dataloader import Dataset, Transforms, Resize, ToTorch, Sampler, collate, DataLoader
from scripts.custom_models import Lambda, flatten, MixedInputModel, TabularModel, CNNModel, CustomResnet

def get_example_dataloaders():
    df_path = r'data/processed_dataframe.csv'
    img_col = 'filename'
    cont_cols = ['followers', 'following', 'engagement_factor_std', 'month', 'year', 'day_name', 'hour']
    cat_cols = []
    target_col = 'engagement_factor_moving_avg'
    image_path = Path(r'data/Images')
    tfms = Transforms([Resize(256), ToTorch()])

    df = pd.read_csv(r'data/processed_dataframe.csv')
    train_idx = df.sample(frac=0.8).index
    valid_idx = df.loc[~df.index.isin(train_idx)].index

    ds_train = Dataset(df_path,
                       img_col = img_col,
                       cont_cols = cont_cols,
                       cat_cols = cat_cols,
                       target_col = target_col,
                       image_path = image_path,
                       transforms = tfms,
                       indices = train_idx)

    ds_valid = Dataset(df_path,
                   img_col = img_col,
                   cont_cols = cont_cols,
                   cat_cols = cat_cols,
                   target_col = target_col,
                   image_path = image_path,
                   transforms = tfms,
                   indices = valid_idx)

    dl_train = DataLoader(dataset = ds_train,
                          sampler = Sampler(ds_train, bs = 16),
                          collate_func = collate)

    dl_valid = DataLoader(dataset = ds_valid,
                          sampler = Sampler(ds_valid, bs = 16),
                          collate_func = collate)


    return dl_train, dl_valid

def get_example_model(dl_train):
    xb, yb = next(iter(dl_train))
    x_image, x_tab = xb

    bs, ch_img, h_img, w_img = x_image.shape
    bs, tab_inputs = x_tab.shape

    num_cnn_outputs = 10
    num_tabular_outputs = 4

    num_mixed_inputs = num_cnn_outputs + num_tabular_outputs


    input_cnn_model = CustomResnet(torchvision.models.resnet34(pretrained = True), [1000,50,20, num_cnn_outputs])
    input_tabular_model = TabularModel([tab_inputs, 10, num_tabular_outputs])
    input_mixed_model = TabularModel([num_mixed_inputs, 7, 1])

    model = MixedInputModel(input_cnn_model, input_tabular_model, input_mixed_model)
    return model

class MSE_Loss(nn.Module):
    def __init__(self, reduce = False):
        super(MSE_Loss, self).__init__()
        self.reduce = reduce

    def forward(self, inp, target):
        if self.reduce: inp = torch.squeeze(inp, -1)
        return ((inp-target)**2).mean()


class Optimizer():
    def __init__(self, model, lr):
        self.params = list(model.parameters())
        self.lr = lr   #learning rate

    def step(self):
        with torch.no_grad():
            for p in self.params:
                p -= self.lr*p.grad

    def zero_grad(self):
        for p in self.params:
            p.grad.data.zero_()
